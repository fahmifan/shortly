// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// URL URL
// swagger:model URL
type URL struct {

	// created at
	// Read Only: true
	CreatedAt string `json:"createdAt,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// is public
	// Required: true
	IsPublic *bool `json:"isPublic"`

	// original
	// Required: true
	Original *string `json:"original"`

	// shorten
	// Required: true
	Shorten *string `json:"shorten"`

	// updated at
	// Read Only: true
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this URL
func (m *URL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsPublic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShorten(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *URL) validateIsPublic(formats strfmt.Registry) error {

	if err := validate.Required("isPublic", "body", m.IsPublic); err != nil {
		return err
	}

	return nil
}

func (m *URL) validateOriginal(formats strfmt.Registry) error {

	if err := validate.Required("original", "body", m.Original); err != nil {
		return err
	}

	return nil
}

func (m *URL) validateShorten(formats strfmt.Registry) error {

	if err := validate.Required("shorten", "body", m.Shorten); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *URL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *URL) UnmarshalBinary(b []byte) error {
	var res URL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
