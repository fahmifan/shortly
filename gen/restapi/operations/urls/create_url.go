// Code generated by go-swagger; DO NOT EDIT.

package urls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// CreateURLHandlerFunc turns a function with the right signature into a create URL handler
type CreateURLHandlerFunc func(CreateURLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateURLHandlerFunc) Handle(params CreateURLParams) middleware.Responder {
	return fn(params)
}

// CreateURLHandler interface for that can handle valid create URL params
type CreateURLHandler interface {
	Handle(CreateURLParams) middleware.Responder
}

// NewCreateURL creates a new http.Handler for the create URL operation
func NewCreateURL(ctx *middleware.Context, handler CreateURLHandler) *CreateURL {
	return &CreateURL{Context: ctx, Handler: handler}
}

/*CreateURL swagger:route POST /urls urls createUrl

CreateURL create URL API

*/
type CreateURL struct {
	Context *middleware.Context
	Handler CreateURLHandler
}

func (o *CreateURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateURLParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateURLBody create URL body
// swagger:model CreateURLBody
type CreateURLBody struct {

	// is public
	// Required: true
	IsPublic *bool `json:"isPublic"`

	// original
	// Required: true
	Original *string `json:"original"`

	// shorten
	// Required: true
	Shorten *string `json:"shorten"`
}

// Validate validates this create URL body
func (o *CreateURLBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIsPublic(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShorten(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateURLBody) validateIsPublic(formats strfmt.Registry) error {

	if err := validate.Required("url"+"."+"isPublic", "body", o.IsPublic); err != nil {
		return err
	}

	return nil
}

func (o *CreateURLBody) validateOriginal(formats strfmt.Registry) error {

	if err := validate.Required("url"+"."+"original", "body", o.Original); err != nil {
		return err
	}

	return nil
}

func (o *CreateURLBody) validateShorten(formats strfmt.Registry) error {

	if err := validate.Required("url"+"."+"shorten", "body", o.Shorten); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateURLBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateURLBody) UnmarshalBinary(b []byte) error {
	var res CreateURLBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
